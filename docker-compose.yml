version: '3.8'
services:
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
      network: host
    container_name: airflow_webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW_DB_URI}
      - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW_ADMIN_PWD=${AIRFLOW_ADMIN_PWD:-admin}
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+${AIRFLOW_DB_URI}
    depends_on:
      - airflow_metadata
      - source_db
      - warehouse_db
      - minio
      - redis
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./include:/opt/airflow/include
      - ./dbt_flights:/opt/airflow/dbt_flights
    networks:
      - airflow-networks

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      network: host
    container_name: airflow_scheduler
    command: >
      bash -c "airflow db upgrade && /start.sh scheduler"
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW_DB_URI}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+${AIRFLOW_DB_URI}
    depends_on:
      - airflow_metadata
      - redis
    volumes:
      - ./dags:/opt/airflow/dags
      - ./include:/opt/airflow/include
      - ./dbt_flights:/opt/airflow/dbt_flights
    networks:
      - airflow-networks

  airflow-worker:
    build:
      context: .
      dockerfile: Dockerfile
      network: host
    container_name: airflow_worker
    command: >
      bash -c "airflow celery worker"
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW_DB_URI}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+${AIRFLOW_DB_URI}
    depends_on:
      - airflow_metadata
      - redis
    volumes:
      - ./dags:/opt/airflow/dags
      - ./include:/opt/airflow/include
      - ./dbt_flights:/opt/airflow/dbt_flights
    networks:
      - airflow-networks

  redis:
    image: redis:6
    container_name: redis
    networks:
      - airflow-networks

  airflow_metadata:
    image: postgres:latest
    container_name: airflow_metadata
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - airflow_metadata:/var/lib/postgresql/data
    networks:
      - airflow-networks

  source_db:
    image: postgres:latest
    container_name: source_db
    environment:
      POSTGRES_USER: ${SOURCE_DB_USER}
      POSTGRES_PASSWORD: ${SOURCE_DB_PASSWORD}
      POSTGRES_DB: ${SOURCE_DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - ./include/source_init.sql:/docker-entrypoint-initdb.d/source_init.sql
      - source_db_data:/var/lib/postgresql/data
    networks:
      - airflow-networks

  warehouse_db:
    image: postgres:latest
    container_name: warehouse_db
    environment:
      POSTGRES_USER: ${WAREHOUSE_DB_USER}
      POSTGRES_PASSWORD: ${WAREHOUSE_DB_PASSWORD}
      POSTGRES_DB: ${WAREHOUSE_DB_NAME}
    ports:
      - "5434:5432"
    volumes:
      - ./include/staging_schema.sql:/docker-entrypoint-initdb.d/staging_schema.sql
      - ./include/warehouse_init.sql:/docker-entrypoint-initdb.d/warehouse_init.sql
      - warehouse_db_data:/var/lib/postgresql/data
    networks:
      - airflow-networks

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    container_name: minio
    hostname: minio
    restart: always
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - airflow-networks

volumes:
  airflow_metadata:
    driver: local
    name: airflow_metadata
  source_db_data:
    driver: local
    name: source_db_data
  warehouse_db_data:
    driver: local
    name: warehouse_db_data
  minio-data:
    driver: local
    name: minio-data

networks:
  airflow-networks:
    driver: bridge
    name: airflow-networks